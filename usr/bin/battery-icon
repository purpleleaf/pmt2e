#!/bin/sh

# This script displays battery icon according to the charge level and charging state

# Author: Piotr Miller <nwg.piotr@gmail.com>
# Author: purpleleaf <max@ganoia.eu>
# Website: http://nwg.pl
# Project: https://github.com/purpleleaf/pmt2e
# License: GPL3

# Dependencies: acpi ogg123 (vorbis-tools) dunst

scriptname=`basename $0`
die() { echo "$*" 1>&2 ; exit 1; }
action=""

show_help () {
  printf -- "\nUsage: $scriptname [ -h | -n | -m | -t | -f | -i ]\n"
  printf -- "\n"
  printf -- "  -h, Show this help message and exit.\n"
  printf -- "  -n, Show notification.\n"
  printf -- "  -m, Show jgmenu.\n"
  printf -- "  -t, show only text as tint2 executor output.\n"
  printf -- "  -f, show a font gyph as tint2 executor output.\n"
  printf -- "  -i, show an icon as tint2 executor output.\n\n"
  printf -- "If multiple arguments are provided, only the first one will considered\n\n"
  exit 0	
}

while getopts ":nhmtfi" opt; do
  case ${opt} in
    h)
      [ -n "$action" ] && die "Only one action can be chosen between -h -n -m -t -f -i"
	  action=help
      ;;
    n)
      [ -n "$action" ] && die "Only one action can be chosen between -h -n -m -t -f -i"
	  action=notification
      ;;
    t)
      [ -n "$action" ] && die "Only one action can be chosen between -h -n -m -t -f -i"
      action=text
      ;;
    f)
      [ -n "$action" ] && die "Only one action can be chosen between -h -n -m -t -f -i"
      action=glyph
      ;;
    i)
      [ -n "$action" ] && die "Only one action can be chosen between -h -n -m -t -f -i"
      action=icon
      ;;
    m)
      [ -n "$action" ] && die "Only one action can be chosen between -h -n -m -t -f -i"
	  action=menu
      ;;
    *)
      die "Invalid option -"$OPTARG""
      ;;
  esac
done

# exit if $action and/or $output are not set
if [[ ! -n "$action" ]]; then
die "$scriptname requires an option: [-h | -n | -m | -t | -f | -i]. \
Please run \"$scriptname -h\" for usage."
fi

if [[ ${show_menu} == "true" ]]; then
    createjgmenu 'About, sh -c  $(yad --image="gtk-about" --on-top --button="yad-ok:0" --center --text="PMT2e - Poor Man Tint2 executors\n\nBash scripts to add some useful \"executors\" to Tint2 panel.\n\nAuthor: purpleaf")'
    exit
fi

bat=$(acpi -b)

if [[ $bat ]]; then
    state=$(echo ${bat} | awk '{print $3}')

    if [[ "$state" = "Not" ]]; then
        level=$(echo ${bat} | awk '{print $5}')
        level=${level::-1}

    else
        level=$(echo ${bat} | awk '{print $4}')
        if [[ "$state" == *"Unknown"* ]]; then
            level=${level::-1}
        else
            if [[ "$level" == "100%" ]]; then
              level=${level::-1}
            else
              level=${level::-2}
            fi
        fi
    fi
fi

get_icon(){
if [[ "$bat" == *"until"* ]]; then
	if [[ "$level" -ge "95" ]]; then
		echo /usr/share/pmt2e/icons/bat-full-charging.svg
	elif [[ "$level" -ge "75" ]]; then
		echo /usr/share/pmt2e/icons/bat-threefourth-charging.svg
	elif [[ "$level" -ge "35" ]]; then
		echo /usr/share/pmt2e/icons/bat-half-charging.svg
	elif [[ "$level" -ge "15" ]]; then
		echo /usr/share/pmt2e/icons/bat-quarter-charging.svg
	else
		echo /usr/share/pmt2e/icons/bat-empty-charging.svg
	fi
else
	if [[ "$level" -ge "95" ]]; then
		echo /usr/share/pmt2e/icons/bat-full.svg
	elif [[ "$level" -ge "75" ]]; then
		echo /usr/share/pmt2e/icons/bat-threefourth.svg
	elif [[ "$level" -ge "35" ]]; then
		echo /usr/share/pmt2e/icons/bat-half.svg
	elif [[ "$level" -ge "15" ]]; then
		echo /usr/share/pmt2e/icons/bat-quarter.svg
	else
		if [[ "$level" -le "5" ]]; then
			ogg123 -q /usr/share/sounds/freedesktop/stereo/bell.oga
			dunstify -t 5000 -h string:x-dunst-stack-tag:battery -u critical "$bat"
		fi
		echo /usr/share/pmt2e/icons/bat-empty.svg
	fi
fi
if [[ $2 == "-l" ]]; then
	echo ${level}%
fi
}

get_glyph(){
if [[ "$bat" == *"until"* ]] || [[ "$bat" == *"Not charging"* ]] || [[ "$bat" == *"Full"* ]] ; then
	if [[ "$level" -eq "100" ]]; then
		echo "󰂅"
	elif [[ "$level" -ge "90" ]]; then
		echo "󰂋"
	elif [[ "$level" -ge "80" ]]; then
		echo "󰂊"
	elif [[ "$level" -ge "70" ]]; then
		echo "󰢞"
	elif [[ "$level" -ge "60" ]]; then
		echo "󰂉"
	elif [[ "$level" -ge "50" ]]; then
		echo "󰢝"
	elif [[ "$level" -ge "40" ]]; then
		echo "󰂈"
	elif [[ "$level" -ge "30" ]]; then
		echo "󰂇"
	elif [[ "$level" -ge "20" ]]; then
		echo "󰂆"
	elif [[ "$level" -ge "10" ]]; then
		echo "󰢜"
	else
		echo "󰢟"
	fi
else
	if [[ "$level" -eq "100" ]]; then
		echo "󰁹"
	elif [[ "$level" -ge "90" ]]; then
		echo "󰂂"
	elif [[ "$level" -ge "80" ]]; then
		echo "󰂁"
	elif [[ "$level" -ge "70" ]]; then
		echo "󰂀"
	elif [[ "$level" -ge "60" ]]; then
		echo "󰁿"
	elif [[ "$level" -ge "50" ]]; then
		echo "󰁾"
	elif [[ "$level" -ge "40" ]]; then
		echo "󰁽"
	elif [[ "$level" -ge "30" ]]; then
		echo "󰁼"
	elif [[ "$level" -ge "20" ]]; then
		echo "󰁻"
	elif [[ "$level" -ge "10" ]]; then
		echo "󰁺"
	else
		if [[ "$level" -le "5" ]]; then
			ogg123 -q /usr/share/sounds/freedesktop/stereo/bell.oga
			dunstify -t 5000 -h string:x-dunst-stack-tag:battery -u critical "$bat"
		fi
		echo "󰂎"
	fi
fi
}

case ${action} in
  help)
    show_help
echo pippo
    ;;
  menu)
    createjgmenu 'About, sh -c  $(yad --image="gtk-about" --on-top --button="yad-ok:0" --center --text="PMT2e - Poor Man Tint2 executors\n\nBash scripts to add some useful \"executors\" to Tint2 panel.\n\nAuthor: purpleaf")'
    ;;
  notification)
	if [[ "$level" -le "5" ]]; then
		if [[ "$bat" == *"until"* ]]; then
		  dunstify -t 2500 -h string:x-dunst-stack-tag:battery -u normal "$bat"
        else
          dunstify -t 2500 -h string:x-dunst-stack-tag:battery -u critical "$bat"
		fi
	else
		dunstify -t 2500 -h string:x-dunst-stack-tag:battery -u normal "$bat"
	fi
    ;;
  text)
	echo "Bat: ${level}%"
    ;;
  glyph)
    get_glyph
    ;;
  icon)
    get_icon
    ;;
esac
