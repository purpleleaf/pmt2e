#!/bin/bash

# Author: purpleleaf <max at ganoia dot eu>
# Thanks to nilsonmorale for Yay settings scripts and other code I 'stole' from ywtray :)
# https://github.com/Dimorld/ywtray
# Thanks to  John D. Martin III  for the original open weather parser
# https://github.com/jdmar3/galo.sh
# Icons by:
# Amchart - https://www.amcharts.com
# JoshuaKimsey - https://github.com/JoshuaKimsey/amCharts-SVG-Icons-Additions

# Dependencies: curl, jq, yad, awk

declare -a weather_data       # array to store data variables requested to open-meteo
day=0 # Set default day to today for open-meteo settings
timezone=$(/bin/ls -l /etc/localtime|/usr/bin/cut -d"/" -f7,8) # Set default time zone from system

show_help () {
  printf -- "\nUsage: $0 -h | -n | -m | -t\n"
  printf -- "\n"
  printf -- "  -h, Show this help message and exit.\n"
  printf -- "  -n, Show notification.\n"
  printf -- "  -m, Show jgmenu.\n"
  printf -- "  -t, show only text as tint2 executor output.\n\n"
  printf -- "If multiple arguments are provided, only the first one will considered\n"
  printf -- "Without arguments outputs weather icon to use with tint2 executor.\n\n"
	exit 0	
}

while getopts ":tnhm" opt; do
  case ${opt} in
    h)
	  show_help
	  exit
      ;;
    n)
	  show_notification=true
      break
      ;;
    t)
      show_text=true
      break
      ;;
    m)
	  show_menu=true
      break
      ;;
    *)
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done

if [[ ${show_menu} == "true" ]]; then
    createjgmenu "Settings, pmw-settings" 'About, sh -c  $(yad --image="gtk-about" --on-top --button="yad-ok:0" --center --text="PMT2e - Poor Man Tint2 executors\n\nBash scripts to add some useful \"executors\" to Tint2 panel.\n\nAuthor: purpleaf")'
    exit
fi

# function to show yad dialog error 
show_errors () {
local text="$1"
yad --splash --image="gtk-dialog-warning" --on-top \
--button="yad-ok:0" --center \
--text="${text}"
exit 1
}

# Import pmw.conf variables
source ~/.config/pmt2e/pmw.conf 2> /dev/null || \
{
if [ ! -d $HOME/.config/pmt2e ]; then 
	mkdir -p $HOME/.config/pmt2e; 
fi; 
pmw-settings; 
source ~/.config/pmt2e/pmw.conf 2> /dev/null || exit 1 
}

# check if settings exist
settings_error="There are problems with your PMW settings. \n Please delete $HOME/.config/pmt2e/pmw.conf \nand run pmw again."

[[ -n "${latitude}" && -n "${longitude}" && -n "${location}" && -n "${temp_unit}" && -n "${windspeed_unit}" && -n "${precipitation_unit}" && -n "${icon_type}" && -n "${notification_icon_type}" ]] || show_errors "${settings_error}"

if [ ${temp_unit} == "celsius" ]; then temp_degree="°C"; elif [ ${temp_unit} == "fahrenheit" ]; then temp_degree="°F"; fi

if [[ ${icon_type} == "monochrome" ]]; then
    icons_dir="/usr/share/pmt2e/wheather_icons/dark" 
elif [[ ${icon_type} == "coloured" ]]; then
    icons_dir="/usr/share/pmt2e/wheather_icons" 
else
	show_glyphs=true
fi

if [[ ${notification_icon_type} == "monochrome" ]]; then
    notification_icons_dir="/usr/share/pmt2e/wheather_icons/dark" 
else
    notification_icons_dir="/usr/share/pmt2e/wheather_icons" 
fi

[[ ${show_notification} == "true" ]] || [[ ${show_menu} == "true" ]] || \
{
  if [[ ${show_text} == "true" ]]; then
	echo "Loading..."
  elif [[ ${show_glyphs} == "true" ]]; then
	echo ""
  else
    echo "${icons_dir}/refresh.svg"
fi
}

# translates the weather api's code numbers to text, and determines icons to use 
function weather_icon_descriptor () {
    local epoch_time="$(date "+%s")" 
 	local wc=$1
	local array_name=$2
	local wicon
	local wtext
    if [[ "${epoch_time}" -ge "$(date -d "${sunrise}" "+%s")" &&  "${epoch_time}" -le "$(date -d "${sunset}" +%s)" ]] ; then  

    # Daytime icons and short weather descriptions
      case "${wc}" in
        0)
            wicon="clear-day.svg"
            wtext="Clear sky"
            wglyph=""
            ;;
        1)
            wicon="fair-day.svg"
            wtext="Mainly clear"
            wglyph=""
            ;;
        2)
            wicon="cloudy-2-day.svg"
            wtext="Partly cloudy"
            wglyph=""
            ;;
        3)
            wicon="cloudy.svg"
            wtext="Overcast"
            wglyph=""
            ;;
        45)
            wicon="fog.svg"
            wtext="Fog"
            wglyph=""
            ;;
        48)
            wicon="fog.svg"
            wtext="Rime fog"
            wglyph=""
            ;;
        51)
            wicon="rainy-1-day.svg"
            wtext="Light drizzle"
            wglyph=""
            ;;
        53)
            wicon="rainy-2-day.svg"
            wtext="Moderate drizzle"
            wglyph=""
            ;;
        55)
            wicon="rainy-3-day.svg"
            wtext="Intense drizzle"
            wglyph=""
            ;;
        56)
            wicon="rain-and-sleet.svg"
            wtext="Light freezing drizzle"
            wglyph=""
            ;;
        57)
            wicon="rain-and-sleet.svg"
            wtext="Intense freezing drizzle"
            wglyph=""
            ;;
        61)
            wicon="rainy-1.svg"
            wtext="Slight rain"
            wglyph=""
            ;;
        63)
            wicon="rainy-2.svg"
            wtext="Moderate rain"
            wglyph=""
            ;;
        65)
            wicon="rainy-3.svg"
            wtext="Intense rain"
            wglyph=""
            ;;
        66)
            wicon="rain-and-sleet.svg"
            wtext="Light freezing rain"
            wglyph=""
            ;;
        67)
            wicon="rain-and-sleet.svg"
            wtext="Intense freezing rain"
            wglyph=""
            ;;
        71)
            wicon="snowy-1-day.svg"
            wtext="Slight snow fall"
            wglyph=""
            ;;
        73)
            wicon="snowy-2-day.svg"
            wtext="Moderate snow fall"
            wglyph=""
            ;;
        75)
            wicon="snowy-3-day.svg"
            wtext="Intense snow fall"
            wglyph=""
            ;;
        77)
            wicon="snow-and-sleet.svg"
            wtext="Snow grains"
            wglyph=""
            ;;
        80)
            wicon="rainy-1.svg"
            wtext="Slight rain showers"
            wglyph=""
            ;;
        81)
            wicon="rainy-2.svg"
            wtext="Moderate rain showers"
            wglyph=""
            ;;
        82)
            wicon="rainy-3.svg"
            wtext="Intense rain showers"
            wglyph=""
            ;;
        85)
            wicon="snowy-1.svg"
            wtext="Slight snow showers"
            wglyph=""
            ;;
        86)
            wicon="snowy-3.svg"
            wtext="Heavy snow showers"
            wglyph=""
            ;;
        95)
            wicon="scattered-thunderstorms.svg"
            wtext="Thunderstorm"
            wglyph=""
            ;;
         96)
            wicon="thunderstorms.svg"
            wtext="Thunderstorm with slight hail"
            wglyph=""
            ;;
        99)
            wicon="thunderstorms.svg"
            wtext="Thunderstorm with heavy hail"
            wglyph=""
            ;;
        *)
            wicon="default-no.svg"
            wtext="unknown"
            wglyph="󰨹"
            ;;
      esac
# Night Time Icons    
    else
      case "${wc}" in
        0)
            wicon="clear-night.svg"
            wtext="Clear sky"
            wglyph=""
            ;;
        1)
            wicon="fair-night.svg"
            wtext="Mainly clear"
            wglyph=""
            ;;
        2)
            wicon="cloudy-2-night.svg"
            wtext="Partly cloudy"
            wglyph=""
            ;;
        3)
            wicon="cloudy.svg"
            wtext="Overcast"
            wglyph=""
            ;;
        45)
            wicon="fog.svg"
            wtext="Fog"
            wglyph=""
            ;;
        48)
            wicon="fog.svg"
            wtext="Rime fog"
            wglyph=""
            ;;
        51)
            wicon="rainy-1-night.svg"
            wtext="Light drizzle"
            wglyph=""
            ;;
        53)
            wicon="rainy-2-night.svg"
            wtext="Moderate drizzle"
            wglyph=""
            ;;
        55)
            wicon="rainy-3-night.svg"
            wtext="Intense drizzle"
            wglyph=""
            ;;
        56)
            wicon="rain-and-sleet.svg"
            wtext="Light freezing drizzle"
            wglyph=""
            ;;
        57)
            wicon="rain-and-sleet.svg"
            wtext="Intense freezing drizzle"
            wglyph=""
            ;;
        61)
            wicon="rainy-1.svg"
            wtext="Slight rain"
            wglyph=""
            ;;
        63)
            wicon="rainy-2.svg"
            wtext="Moderate rain"
            wglyph=""
            ;;
        65)
            wicon="rainy-3.svg"
            wtext="Intense rain"
            wglyph=""
            ;;
        66)
            wicon="rain-and-sleet.svg"
            wtext="Light freezing rain"
            wglyph=""
            ;;
        67)
            wicon="rain-and-sleet.svg"
            wtext="Intense freezing rain"
            wglyph=""
            ;;
        71)
            wicon="snowy-1-day.svg"
            wtext="Slight snow fall"
            wglyph=""
            ;;
        73)
            wicon="snowy-2-day.svg"
            wtext="Moderate snow fall"
            wglyph=""
            ;;
        75)
            wicon="snowy-3-day.svg"
            wtext="Intense snow fall"
            wglyph=""
            ;;
        77)
            wicon="snow-and-sleet.svg"
            wtext="Snow grains"
            wglyph=""
            ;;
        80)
            wicon="rainy-1.svg"
            wtext="Slight rain showers"
            wglyph=""
            ;;
        81)
            wicon="rainy-2.svg"
            wtext="Moderate rain showers"
            wglyph=""
            ;;
        82)
            wicon="rainy-3.svg"
            wtext="Intense rain showers"
            wglyph=""
            ;;
        85)
            wicon="snowy-1.svg"
            wtext="Slight snow showers"
            wglyph=""
            ;;
        86)
            wicon="snowy-3.svg"
            wtext="Heavy snow showers"
            wglyph=""
            ;;
        95)
            wicon="scattered-thunderstorms.svg"
            wtext="Thunderstorm"
            wglyph=""
            ;;
         96)
            wicon="thunderstorms.svg"
            wtext="Thunderstorm with slight hail"
            wglyph=""
            ;;
        99)
            wicon="thunderstorms.svg"
            wtext="Thunderstorm with heavy hail"
            wglyph=""
            ;;
        *)
            wicon="default-no.svg"
            wtext="unknown"
            wglyph="󰨹"
            ;;
      esac       
    fi
	declare -A -g "$array_name"
	read $array_name["icon"] <<< "$wicon"
	read $array_name["text"] <<< "$wtext"
	read $array_name["glyph"] <<< "$wglyph"
}

function deg_to_direction() {
  local deg=$1
  # N 348.75 - 11.25
  if [[ "${deg}" -ge 348 ]] || [[ "${deg}" -le 11 ]];  then
    echo "N"
  # NNE 11.25 - 33.75
  elif [[ "${deg}" -gt 11 ]] && [[ "${deg}" -lt 34 ]];  then
    echo "NNE"
  # NE 33.75 - 56.25
  elif [[ "${deg}" -ge 34 ]] && [[ "${deg}" -lt 56 ]]; then
    echo "NE"
  # ENE 56.25 - 78.75
  elif [[ "${deg}" -ge 56 ]] && [[ "${deg}" -lt 78 ]]; then
    echo "ENE"
  # E 78.75 - 101.25
  elif [[ "${deg}" -ge 78 ]] && [[ "${deg}" -lt 101 ]]; then
    echo "E"
  # ESE 101.25 - 123.75
  elif [[ "${deg}" -ge 101 ]] && [[ "${deg}" -lt 123 ]]; then
    echo "ESE"
  # SE 123.75 - 146.25
  elif [[ "${deg}" -ge 123 ]] && [[ "${deg}" -lt 146 ]]; then
    echo "SE"
  # SSE 146.25 - 168.75
  elif [[ "${deg}" -ge 146 ]] && [[ "${deg}" -lt 168 ]]; then
    echo "SSE"
  # S 168.75 - 191.25
  elif [[ "${deg}" -ge 168 ]] && [[ "${deg}" -lt 191 ]]; then
    echo "S"
  # SSW 191.25 - 213.75
  elif [[ "${deg}" -ge 191 ]] && [[ "${deg}" -lt 213 ]]; then
    echo "SSW"
  # SW 213.75 - 236.25
  elif [[ "${deg}" -ge 213 ]] && [[ "${deg}" -lt 236 ]]; then
    echo "SW"  
  # WSW 236.25 - 258.75
  elif [[ "${deg}" -ge 236 ]] && [[ "${deg}" -lt 258 ]]; then
    echo "WSW" 
  # W 258.75 - 281.25
  elif [[ "${deg}" -ge 258 ]] && [[ "${deg}" -lt 281 ]]; then
    echo "W" 
  # WNW 281.25 - 303.75
  elif [[ "${deg}" -ge 281 ]] && [[ "${deg}" -lt 303 ]]; then
    echo "WNW" 
  # NW 303.75 - 326.25
  elif [[ "${deg}" -ge 303 ]] && [[ "${deg}" -lt 326 ]]; then
    echo "NW" 
  # NNW 326.25 - 348.75
  elif [[ "${deg}" -ge 326 ]] && [[ "${deg}" -lt 348 ]]; then
    echo "NW" 
  else
    echo "N/A"
  fi
}

# create a temp file to store open-meteo data
weather_file=$(mktemp -t open-meteo.XXXXXXXXXX)

# getting http response as output, redirecting json content to file
open_meteo_response=$(
  curl -s -G --output ${weather_file} --write-out %{http_code} \
    -d "latitude=${latitude}" \
    -d "longitude=${longitude}" \
    -d "daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,precipitation_probability_max,windspeed_10m_max,winddirection_10m_dominant" \
    -d "current=temperature_2m,relative_humidity_2m,precipitation,weathercode,cloud_cover,wind_speed_10m,wind_direction_10m" \
    -d "temperature_unit=${temp_unit}&windspeed_unit=${windspeed_unit}&precipitation_unit=${precipitation_unit}" \
    -d "timezone=${timezone}&forecast_days=1" \
    https://api.open-meteo.com/v1/forecast
)

weather_data=$(cat ${weather_file})
rm ${weather_file}

# check http output
if [ ${open_meteo_response} -ne "200" ]; then
	if [[  ${weather_data} == *"error"* ]]; then
		# Query malformed, json reports errors
		show_errors "PM Weather - Query error."
	else
		# Other http errors 
		show_errors "PM Weather - Http Error ${open_meteo_response}"
	fi
	show_errors "PM Weather -  Something went wrong!"
else
	#check if json contains necessary data
	if [[  ${weather_data} != *"current"* ]] || [[  ${weather_data} != *"daily_units"* ]] ; then   
		show_errors "PM Weather - No useful json data"
	fi
fi

# Extract current weather variables
current_temp=$(jq -r -c ".current.temperature_2m" <<< ${weather_data})
current_wind_speed=$(jq -r -c ".current.wind_speed_10m" <<< ${weather_data})
current_wind_direction=$(jq -r -c ".current.wind_direction_10m" <<< ${weather_data})
current_cloud_cover=$(jq -r -c ".current.cloud_cover" <<< ${weather_data})
current_weathercode=$(jq -r -c ".current.weathercode" <<< ${weather_data})
relative_humidity=$(jq -r -c ".current.relative_humidity_2m" <<< ${weather_data})
precipitation=$(jq -r -c ".current.precipitation" <<< ${weather_data})
# Extract forecast variables
sunset=$(jq -r -c ".daily.sunset[${day}]" <<< ${weather_data})
sunrise=$(jq -r -c ".daily.sunrise[${day}]" <<< ${weather_data})
precip_sum=$(jq -r -c ".daily.precipitation_sum[${day}]" <<< ${weather_data})
precip_percentage=$(jq -r -c ".daily.precipitation_probability_max[${day}]" <<< ${weather_data})
temp_low=$(jq -r -c ".daily.temperature_2m_min[${day}]" <<< ${weather_data})
temp_high=$(jq -r -c ".daily.temperature_2m_max[${day}]" <<< ${weather_data})
windspeed=$(jq -r -c ".daily.windspeed_10m_max[${day}]" <<< ${weather_data})
winddirection=$(jq -r -c ".daily.winddirection_10m_dominant[${day}]" <<< ${weather_data})

weathercode=$(jq -r -c ".daily.weathercode[${day}]" <<< ${weather_data})

weather_icon_descriptor ${current_weathercode} "curr_weather"
weather_icon_descriptor ${weathercode} "forecast_weather"

if [[ ${show_notification} == "true" ]]; then
	notif_subject="${location}"
    notif_body="\nCurrent Weather:\n
	${curr_weather["glyph"]} ${current_temp}${temp_degree} - ${curr_weather["text"]}\n
    Humidity: ${relative_humidity}% - Cloud Cover: ${current_cloud_cover}%\n
	Wind: ${current_wind_speed} ${windspeed_unit} `deg_to_direction ${current_wind_direction}`\n
    Precipitation: ${precipitation} ${precipitation_unit}\n\n
	Forecast:\n
	${forecast_weather["glyph"]} ${forecast_weather["text"]} - $temp_low${temp_degree}/$temp_high${temp_degree}\n
	Precipitation: $precip_sum ${precipitation_unit}\n
	Prec. probability: $precip_percentage%\n
	Sunrise: `date -d $sunrise +%H:%M`\n
	Sunset:  `date -d $sunset +%H:%M`"

	dunstify -i "${notification_icons_dir}/${curr_weather["icon"]}" "$notif_subject" "$(echo ${notif_body} | sed 's/^[ \t]*//')"

	exit
fi

if [[ ${show_text} == "true" ]]; then
	echo ${curr_weather["text"]}
elif [[ ${show_glyphs} == "true" ]]; then
	echo ${curr_weather["glyph"]}
else
    echo "${icons_dir}/${curr_weather["icon"]}"
fi

